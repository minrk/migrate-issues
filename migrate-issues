#!/usr/bin/env ruby

require "rubygems"
require "netrc"
require "highline/import"
require "octokit"


def check_token
  # get GitHub auth token, creating one if we don't find it.
  rc = Netrc.read Netrc.default_path
  if not rc['api.github.com'].nil?
    return
  end
  puts "We need your password to generate an OAuth token. The password will not be stored."
  username = ask "Username: "
  password = ask("Password:  ") { |q| q.echo = '*' }
  client = Octokit::Client.new(
    :login => username,
    :password => password,
  )


  
  user = begin
    reply = client.create_authorization(
      :scopes => ["public_repo"],
      :note => "Issue Migration",
    )
  rescue Octokit::OneTimePasswordRequired
    otp = ask('OTP: ') {|q| q.echo = '*'}
    reply = client.create_authorization(
      :scopes => ["public_repo"],
      :note => "Issue Migration",
      :headers => {'X-GitHub-OTP' => otp}
    )
  end
  
  token = reply.token
  rc['api.github.com'] = username, token
  rc.save
end


def relink_issues(text, repo)
  text = text.gsub(/(?<=^|[:,\s])(#\d+)\b/, "#{repo}\\1")
  return text
end


def migrate_comment_body(comment, repo)
  # create the migrated comment body with attribution
  user = comment['user']['login']
  url = comment['html_url']
  return [
    "@#{user} [commented](#{url})",
    relink_issues(comment['body'], repo)
  ].join("\n\n")
end

def migrate_issue_body(issue, repo)
  # create migrated issue body with link and attribution
  user = issue['user']['login']
  number = issue['number']
  return [
    "@#{user} opened #{repo}##{number}",
    relink_issues(issue['body'], repo)
  ].join("\n\n")
end


def ensure_milestone(github, repo, title)
  # get milestone number from title
  # create the milestone if it doesn't exist
  github.list_milestones(repo).each do |milestone|
    if milestone.title == title
      return milestone.number
    end
  end
  puts "Creating milestone #{repo}:#{title}"
  milestone = github.create_milestone(repo, title)
  return milestone.number
end


def migrate_issue(github, from_number, from_repo, to_repo)
  # migrate an issue from one repo to another.
  puts "Migrating #{from_repo}##{from_number} to #{to_repo}"
  
  # get the original issue:
  begin
    issue = github.issue(from_repo, from_number)
  rescue Octokit::NotFound
    puts "#{from_repo}##{from_number} doesn't appear to exist"
    return
  end
  if issue.closed_at?
    puts "#{from_repo}##{from_number} is closed, not migrating"
    return
  end
  puts issue.title
  
  data = {
    issue: {
      title: issue.title,
      created_at: issue.created_at.iso8601,
    },
    comments: [],
  }
  
  data[:issue][:body] = migrate_issue_body(issue, from_repo)
  
  data[:issue][:labels] = issue.labels.map { |label| label.name }
  if issue.assignee?
    data[:issue][:assignee] = issue.assignee.login
  end
  # Don't migrate milestones
  # if issue.milestone?
  #   milestone = ensure_milestone(github, to_repo, issue.milestone.title)
  #   data[:issue][:milestone] = milestone
  # end
  
  if issue.comments > 0
    puts "Migrating #{issue['comments']} comments"
    github.issue_comments(from_repo, from_number).each do |comment|
      data[:comments].push ({
        body: migrate_comment_body(comment, from_repo),
        created_at: comment.created_at.iso8601,
      })
    end
  end
  
  path = "#{Octokit::Repository.path to_repo}/import/issues"
  response = github.post(path, data)
  return response.id
end

def close_migrated(github, from_repo, to_repo, from_number, to_number)
  # migrate comments
  github.add_comment(from_repo, from_number, "Migrated to #{to_repo}##{to_number}")
  puts "Closing #{from_repo}##{from_number}"
  github.close_issue(from_repo, from_number)
end

def wait_for_import(github, to_repo, request_id)
  url = "#{Octokit::Repository.path to_repo}/import/issues/#{request_id}"
  puts "Waiting for #{url}"
  response = github.get(url)
  while response.status == "pending"
    sleep 1
    response = github.get(url)
  end
  if response.status == "failed"
    puts response.errors
    return
  end
  puts "Created #{response.issue_url}"
  return response.issue_url.rpartition('/')[-1].to_i
end

# verify that there's a GitHub token in .netrc
check_token

# create client
github = Octokit::Client.new(:netrc => true)
github.auto_paginate = true
github.default_media_type = 'application/vnd.github.golden-comet-preview+json'

# parse args
from_repo = ARGV[0]
to_repo = ARGV[1]
issues = ARGV.slice(2, ARGV.length).to_a.map { |a| a.to_i }

if !from_repo
  puts "Must specify source repo"
  exit(1)
end
if !to_repo
  puts "Must specify destination repo"
  exit(1)
end
if issues.length == 0
  puts "Must specify at least one issue to migrate"
  exit(1)
end

# Request issue import
pending = issues.map do |number|
  migrate_issue(github, number, from_repo, to_repo)
end

issues.zip(pending).map do |from_number, request_id|
  if request_id.nil?
    next
  end
  # wait for new issues to be created
  to_number = wait_for_import(github, to_repo, request_id)
  if to_number.nil?
    puts "Failed to migrate #{from_repo}/#{from_number}"
  else
    # add comment to original issue, linking to new home
    close_migrated(github, from_repo, to_repo, from_number, to_number)
  end
end
